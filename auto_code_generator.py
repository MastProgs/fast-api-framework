
import os
import pandas

def IsNaN(num):
    return num != num

def GetXlsxList(path='./', fileExtention='.xlsx') -> set[str]:
        
    flist = os.listdir(path=path)        
    flist = [fname for fname in flist if fileExtention in fname]
    flist = [fname.split(sep='.')[0] for fname in flist]
    flist = set((fname for fname in flist if fname.isalpha()))
    return flist

def AUTO_MakeDataScriptFiles(xlsxPath:str, autoCodeGenPath:str, outPyFileName:str, readFileExtention:str ='.xlsx'):
    
    if '/' == xlsxPath[-1]:
        xlsxPath = xlsxPath[:-2]
        
    if '/' != autoCodeGenPath[-1]:
        autoCodeGenPath += '/'
    
    path = xlsxPath
    outPath = autoCodeGenPath
    fExtention = readFileExtention
    xlsxList = GetXlsxList(path=xlsxPath, fileExtention=fExtention)
    
    with open((outPath + outPyFileName + ".py"), 'w') as f:
        
        fileCodeList: list[str] = list()
        dataElemList: list[str] = list()
        
        excelTypeToPyType = {'int':'int'
                            , '[int]':'list[int]'
                            , 'string':'str'
                            , '[string]':'list[str]'
                            , 'float':'float'
                            , '[float]':'list[float]'
                            , 'bool':'bool'
                            , '[bool]':'list[bool]'
                            }
        
        excelTypeToInitValue = {'int':'0'
                            , '[int]':'list()'
                            , 'string':''
                            , '[string]':'list()'
                            , 'float':'0.0'
                            , '[float]':'list()'
                            , 'bool':'False'
                            , '[bool]':'list()'
                            }
        
        frontCode = '''
######################################################################
#                                                                    #
# This file is automatically generated, DO NOT modify it arbitrarily #
#                                                                    #
######################################################################

from common.gmodel import StructModel
            
class DataScript(StructModel):    
    def __init__(self) -> None:
        super().__init__()
                            
    def GetKeyCol(self) -> str:
        return ""
    
    def GetArrayCols(self) -> set[str]:
        return {}
'''
        fileCodeList.append(frontCode)
        
        DATA_START_ROW = 4
        
        for xlsxName in xlsxList:
            ffullname = path + '/' + xlsxName + fExtention
            df_raw = pandas.read_excel(ffullname).fillna(method='ffill')
            df_raw = df_raw.loc[:, ~df_raw.columns.str.contains('^Unnamed')]
            df_raw = df_raw.loc[:, ~df_raw.columns.str.contains('^client', case=False)]
            df_raw = df_raw.loc[:, ~df_raw.columns.str.contains('^design', case=False)]
            df_option = df_raw.iloc[:DATA_START_ROW]
            
            isNotKeyList = IsNaN(df_option.iloc[0].values)
            if 0 < len([b for b in isNotKeyList if b == False]):        
                keyIdx = 0
                for isNotKey in isNotKeyList:
                    if False == isNotKey:
                        break
                    keyIdx += 1
                    
                typeList:list[str] = df_option.iloc[1].values
                typeList = [i.replace(" ", "") for i in typeList]
                
                memberNameList:list[str] = df_option.iloc[DATA_START_ROW - 1].values
                memberNameList = [i.replace(" ", "") for i in memberNameList]
                
                defineMemberCodeList:list[str] = list()
                for mType, mName in zip(typeList, memberNameList):
                    rowStr = f"{mName}:{excelTypeToPyType[mType]} = {excelTypeToInitValue[mType]}"
                    defineMemberCodeList.append("\n    " + rowStr)
                
                initMemberCodeList:list[str] = list()
                for mType, mName in zip(typeList, memberNameList):
                    rowStr = f"self.{mName} = {mName}"
                    initMemberCodeList.append("\n        " + rowStr)
                    
                arrTypeNameList:list[int] = list()
                arrIdx = 0
                for mType in typeList:
                    if '[' in mType:
                        arrTypeNameList.append('"' + memberNameList[arrIdx] + '"')
                    arrIdx += 1
                
                # Make Class Define First
                classDefine = f'''

class {xlsxName}(DataScript):
    {"".join(defineMemberCodeList)}
    
    def __init__(self, {", ".join(memberNameList)}) -> None:
        super().__init__()
        {"".join(initMemberCodeList)}
                        
    def GetKeyCol(self) -> str:
        return "{memberNameList[keyIdx]}"
    
    def GetArrayCols(self) -> set[str]:
        return {{{", ".join(arrTypeNameList)}}}

'''
                fileCodeList.append(classDefine)
                
                # Import Dataz
                df_data = pandas.DataFrame(df_raw.iloc[DATA_START_ROW:]).reset_index(drop=True)
                df_data.columns = df_option.iloc[DATA_START_ROW - 1].values
                
                for rowIdx, rowDataList in df_data.iterrows():
                    
                    valueList: list[str] = list()
                    for colType, colName in zip(typeList, memberNameList):
                        
                        value:str = str(rowDataList[colName])
                        if 'str' in colType:
                            value = '"' + value + '"'
                        
                        if '"' + colName + '"' in arrTypeNameList:
                            value = '[' + value + ']'
                    
                        valueList.append(value)
                        
                    rowStr = f'{xlsxName}({", ".join(valueList)})'
                    dataElemList.append('\n        ' + rowStr)
                
            else:
                # ERROR - No Key property in data
                pass
                
        lastGetDataListFunc = f'''

def GetDataList() -> list[DataScript]:
    return [{",".join(dataElemList)}
        ]
            
'''    
        fileCodeList.append(lastGetDataListFunc)
        f.write("".join(fileCodeList))
        
        
if __name__ == "__main__":    
    
    AUTO_MakeDataScriptFiles(xlsxPath="./xlsx", autoCodeGenPath="./common/script/models", outPyFileName="model", readFileExtention=".xlsx")